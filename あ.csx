// Undertale Mod Tool Script: Convert to GameMaker Studio 2 Project
// Version: 1.4 (Fix CS1026 comma error in ConvertSprites sequence)
// Author: [Your Name or AI Assistant]
// Description: Converts the currently loaded UMT data into a GMS2 project structure.
//              Manual adjustments in GMS2 (especially GML code, tilesets, fonts)
//              will be required after conversion.
// Requirements: Newtonsoft.Json.dll must be accessible by UMT.

#r "System.IO.Compression.FileSystem"
#r "System.Drawing"
#r "Newtonsoft.Json" // <<< Essential dependency! Ensure UMT can find this.

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using UndertaleModLib;
using UndertaleModLib.Models;
using UndertaleModLib.Util;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

public class GMS2Converter : IUMTScript
{
    // --- Configuration ---
    private const string GMS2_VERSION = "2.3.7.606"; // Target GMS2 IDE version
    private const string RUNTIME_VERSION = "2.3.7.476"; // Target GMS2 Runtime version
    private const bool TRY_DECOMPILE_IF_NEEDED = true;
    private const bool WARN_ON_MISSING_DECOMPILED_CODE = true;

    // --- Internal State ---
    private UndertaleData Data;
    private string OutputPath;
    private string ProjectName;
    private Guid ProjectGuid;
    private Dictionary<string, Guid> ResourceGuids = new Dictionary<string, Guid>();
    private Dictionary<string, string> ResourcePaths = new Dictionary<string, string>();
    private Dictionary<UndertaleResource, string> ResourceToNameMap = new Dictionary<UndertaleResource, string>();
    private List<string> CreatedDirectories = new List<string>();

    private List<JObject> ResourceList = new List<JObject>();
    private Dictionary<string, List<string>> FolderStructure = new Dictionary<string, List<string>>();

    public void Execute(UndertaleData data)
    {
        this.Data = data;
        if (Data == null)
        {
            UMT.ShowMessage("No data loaded in Undertale Mod Tool.");
            return;
        }

        // Pre-check for Newtonsoft.Json
        try
        {
             var jsonTest = JObject.Parse("{\"test\": \"ok\"}");
             if (jsonTest["test"].ToString() != "ok") throw new Exception("JSON Test Failed");
              UMT.Log("Newtonsoft.Json library seems accessible.");
        }
        catch(Exception jsonEx)
        {
             UMT.ShowError($"Error accessing Newtonsoft.Json library: {jsonEx.Message}\n\nThis script requires Newtonsoft.Json.dll to be available in the UMT environment (e.g., in the UMT folder).\nPlease ensure it's present and try again.\nConversion aborted.");
             UMT.Log("Newtonsoft.Json check failed. Aborting.");
             return;
        }


        // Check for decompiled code
        if (Data.Code == null || !Data.Code.Any() || Data.Code.All(c => c == null || c.Decompiled == null))
        {
            if (TRY_DECOMPILE_IF_NEEDED)
            {
                UMT.Log("Code not decompiled or missing. Attempting decompilation (this might require manual action in UMT)...");
                try
                {
                    UMT.Log(">> Please ensure you have run 'Decompile All' in UMT if automatic decompilation fails. <<");
                    // Re-check after potential decompilation attempt (actual API call might differ/not exist)
                    if (Data.Code == null || !Data.Code.Any() || Data.Code.All(c => c == null || c.Decompiled == null))
                    {
                         UMT.Log("Warning: Code still appears decompiled after attempt. Conversion will proceed but scripts/events will be empty.");
                    } else {
                         UMT.Log("Decompilation seems successful or was already done.");
                    }
                }
                catch (Exception ex)
                {
                    UMT.ShowError("Error during decompilation attempt: " + ex.Message + "\nPlease try decompiling manually in UMT first.");
                }
            }
            else if (WARN_ON_MISSING_DECOMPILED_CODE)
            {
                 UMT.Log("Warning: Code is not decompiled. Scripts and event code will be missing in the GMS2 project.");
            }
        } else {
             UMT.Log("Decompiled code found.");
        }


        // --- 1. Select Output Directory ---
        using (var fbd = new FolderBrowserDialog())
        {
            fbd.Description = "Select the Output Folder for the GMS2 Project";
            DialogResult result = fbd.ShowDialog();

            if (result == DialogResult.OK && !string.IsNullOrWhiteSpace(fbd.SelectedPath))
            {
                OutputPath = fbd.SelectedPath;
                ProjectName = SanitizeFolderName(Data.GeneralInfo?.DisplayName?.Content ?? Path.GetFileNameWithoutExtension(Data.Filename) ?? "ConvertedProject");
                OutputPath = Path.Combine(OutputPath, ProjectName);
                 UMT.Log($"Output Path set to: {OutputPath}");
            }
            else
            {
                UMT.ShowMessage("Output folder selection cancelled. Aborting conversion.");
                return;
            }
        }

        // --- 2. Initialize Project Structure ---
        try
        {
            if (Directory.Exists(OutputPath))
            {
                var overwriteResult = MessageBox.Show($"The directory '{OutputPath}' already exists. Overwrite? (This will delete existing contents!)", "Directory Exists", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (overwriteResult == DialogResult.Yes)
                {
                     UMT.Log($"Deleting existing directory: {OutputPath}");
                    try { Directory.Delete(OutputPath, true); }
                    catch (IOException ioEx) { UMT.ShowError($"Error deleting directory (is it open elsewhere?): {ioEx.Message}"); return; }
                }
                else { UMT.ShowMessage("Conversion aborted."); return; }
            }
             Directory.CreateDirectory(OutputPath); CreatedDirectories.Add(OutputPath);
            ProjectGuid = Guid.NewGuid();

            // Create base GMS2 folders
             CreateGMS2Directory("options"); CreateGMS2Directory("options/main"); CreateGMS2Directory("options/windows");
             CreateGMS2Directory("configs"); CreateGMS2Directory("folders"); CreateGMS2Directory("datafiles");
             CreateDefaultConfig();
             BuildResourceNameMap();

             // --- 3. Convert Resources ---
             UMT.Log("Starting resource conversion...");
            var conversionSteps = new List<Tuple<string, Action>> {
                Tuple.Create("Audio Groups", (Action)ConvertAudioGroups), Tuple.Create("Texture Groups", (Action)ConvertTextureGroups),
                Tuple.Create("Sprites", (Action)ConvertSprites), Tuple.Create("Sounds", (Action)ConvertSounds),
                Tuple.Create("Tilesets", (Action)ConvertTilesets), Tuple.Create("Fonts", (Action)ConvertFonts),
                Tuple.Create("Paths", (Action)ConvertPaths), Tuple.Create("Scripts", (Action)ConvertScripts),
                Tuple.Create("Shaders", (Action)ConvertShaders), Tuple.Create("Timelines", (Action)ConvertTimelines),
                Tuple.Create("Objects", (Action)ConvertObjects), Tuple.Create("Rooms", (Action)ConvertRooms),
                Tuple.Create("Included Files", (Action)ConvertIncludedFiles), Tuple.Create("Extensions", (Action)ConvertExtensions),
                Tuple.Create("Notes", (Action)ConvertNotes)
            };

            foreach(var step in conversionSteps) {
                 try {
                     string resourceDirName = step.Item1.Split(' ')[0].ToLowerInvariant();
                     if (resourceDirName.EndsWith("s")) {} else if (resourceDirName == "audiogroup") resourceDirName = "audiogroups"; else if (resourceDirName == "texturegroup") resourceDirName = "texturegroups"; else if (resourceDirName == "included") resourceDirName = "includedfiles"; else if (resourceDirName == "note") resourceDirName = "notes"; else resourceDirName += "s";
                     if (resourceDirName != "options" && resourceDirName != "configs" && resourceDirName != "folders" && resourceDirName != "datafiles" ) CreateGMS2Directory(resourceDirName);
                     step.Item2(); // Execute conversion
                 } catch (Exception stepEx) {
                      UMT.Log($" >>> CRITICAL ERROR during '{step.Item1}' conversion step: {stepEx.Message}\n{stepEx.StackTrace}");
                      UMT.ShowError($"Critical error during '{step.Item1}' conversion. Check logs. Aborting further steps."); throw;
                 }
            }

            // --- 4. Create Project File (.yyp) ---
             UMT.Log("Creating main project file (.yyp)..."); CreateProjectFile();
            // --- 5. Create Options Files ---
             UMT.Log("Creating default options files..."); CreateOptionsFiles();

             UMT.Log($"GMS2 Project '{ProjectName}' conversion process finished.");
             UMT.ShowMessage($"Conversion complete! Project saved to:\n{OutputPath}\n\nIMPORTANT:\n- Open the project in GameMaker Studio 2.\n- Expect GML code errors due to GMS1/GMS2 incompatibility. Manual code fixes are required.\n- Review Tilesets (tile size, offsets) and repaint Tile Layers in rooms.\n- Check Fonts and potentially re-import them in GMS2.\n- Verify resource references (sprites in objects, sounds, etc.).");
        }
        catch (Exception ex) { UMT.ShowError($"An error occurred during conversion: {ex.Message}\n\nStack Trace:\n{ex.StackTrace}"); UMT.Log($"Error: Conversion failed. See details above."); }
        finally { ResourceGuids.Clear(); ResourcePaths.Clear(); ResourceList.Clear(); FolderStructure.Clear(); ResourceToNameMap.Clear(); CreatedDirectories.Clear(); }
    }

    // === Helper Functions === (Sanitize, GUID, NameMap, WriteJson, CreateRef, CreateDir remain the same as v1.3)

    private void CreateGMS2Directory(string relativePath) { /* As before */ string fullPath = Path.Combine(OutputPath, relativePath); if (!Directory.Exists(fullPath)) { try { Directory.CreateDirectory(fullPath); CreatedDirectories.Add(fullPath); string topLevel = relativePath.Split(Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar)[0]; if (!FolderStructure.ContainsKey(topLevel)) FolderStructure[topLevel] = new List<string>(); } catch (Exception ex) { UMT.Log($"ERROR: Failed to create directory {fullPath}: {ex.Message}"); throw; } } }
    private string SanitizeFileName(string name) { /* As before */ if (string.IsNullOrWhiteSpace(name)) name = "unnamed"; string invalidChars = Regex.Escape(new string(Path.GetInvalidFileNameChars())); string invalidRegStr = string.Format(@"([{0}]*\.+$)|([{0}]+)", invalidChars); string sanitized = Regex.Replace(name, invalidRegStr, "_").Trim().Replace(' ', '_'); if (string.IsNullOrWhiteSpace(sanitized)) sanitized = "unnamed_" + Guid.NewGuid().ToString("N").Substring(0, 8); string[] reserved = {"all","noone","global","local","self","other","true","false","object_index","id","begin","end","if","then","else","for","while","do","until","repeat","switch","case","default","break","continue","return","exit","with","var","mod","div","not","and","or","xor","enum","constructor","function","new","delete","try","catch","finally","throw","static","argument","argument_count","undefined","infinity","nan"}; if (reserved.Contains(sanitized.ToLowerInvariant())) sanitized += "_"; if (Regex.IsMatch(sanitized, @"^\d")) sanitized = "_" + sanitized; return sanitized; }
    private string SanitizeFolderName(string name) { /* As before */ if (string.IsNullOrWhiteSpace(name)) name = "unnamed_folder"; string invalidChars = Regex.Escape(new string(Path.GetInvalidPathChars())); string invalidRegStr = string.Format(@"([{0}]+)", invalidChars); string sanitized = Regex.Replace(name, invalidRegStr, "_").Trim().Replace(' ', '_'); if (string.IsNullOrWhiteSpace(sanitized)) sanitized = "unnamed_folder_" + Guid.NewGuid().ToString("N").Substring(0,8); return sanitized; }
    private Guid GetResourceGuid(string resourceKey) { if (!ResourceGuids.TryGetValue(resourceKey, out Guid guid)) { guid = Guid.NewGuid(); ResourceGuids[resourceKey] = guid; } return guid; }
    private void BuildResourceNameMap() { /* As before */ UMT.Log("Building resource name map..."); var nameCounts = new Dictionary<string, int>(StringComparer.OrdinalIgnoreCase); var existingValues = new HashSet<string>(StringComparer.OrdinalIgnoreCase); ResourceToNameMap.Clear(); Action<IList<UndertaleNamedResource>> processList = (list)=>{ if(list==null)return; foreach(var res in list.Where(r=>r?.Name?.Content!=null)){ if(ResourceToNameMap.ContainsKey(res))continue; string bn=SanitizeFileName(res.Name.Content); string un=bn; int ct=0; while(existingValues.Contains(un)){ if(!nameCounts.ContainsKey(bn))nameCounts[bn]=1; ct=nameCounts[bn]++; un=$"{bn}_{ct}"; } ResourceToNameMap[res]=un; existingValues.Add(un); if(!nameCounts.ContainsKey(bn))nameCounts[bn]=1; } }; Action<IList<UndertaleNamedResourceGroup>> processGroupList = (list)=>{ if(list==null)return; foreach(var res in list.Where(r=>r?.Name?.Content!=null)){ if(ResourceToNameMap.ContainsKey(res))continue; string bn=SanitizeFileName(res.Name.Content); if(bn.Equals("default",StringComparison.OrdinalIgnoreCase)){ if(res is UndertaleAudioGroup)bn="audiogroup_default"; else if(res is UndertaleTextureGroup)bn="Default";} string un=bn; int ct=0; while(existingValues.Contains(un)){ if(!nameCounts.ContainsKey(bn))nameCounts[bn]=1; ct=nameCounts[bn]++; un=$"{bn}_{ct}";} ResourceToNameMap[res]=un; existingValues.Add(un); if(!nameCounts.ContainsKey(bn))nameCounts[bn]=1; } }; processList(Data.Sprites?.Cast<UndertaleNamedResource>().ToList()); processList(Data.Backgrounds?.Cast<UndertaleNamedResource>().ToList()); processList(Data.Sounds?.Cast<UndertaleNamedResource>().ToList()); processList(Data.Objects?.Cast<UndertaleNamedResource>().ToList()); processList(Data.Rooms?.Cast<UndertaleNamedResource>().ToList()); processList(Data.Scripts?.Cast<UndertaleNamedResource>().ToList()); processList(Data.Shaders?.Cast<UndertaleNamedResource>().ToList()); processList(Data.Fonts?.Cast<UndertaleNamedResource>().ToList()); processList(Data.Paths?.Cast<UndertaleNamedResource>().ToList()); processList(Data.Timelines?.Cast<UndertaleNamedResource>().ToList()); processGroupList(Data.AudioGroups?.Cast<UndertaleNamedResourceGroup>().ToList()); processGroupList(Data.TextureGroups?.Cast<UndertaleNamedResourceGroup>().ToList()); if(Data.IncludedFiles!=null){ foreach(var f in Data.IncludedFiles.Where(fl=>fl?.Name?.Content!=null)){ if(ResourceToNameMap.ContainsKey(f))continue; string bn=SanitizeFileName(Path.GetFileName(f.Name.Content)); if(string.IsNullOrEmpty(bn))bn="included_file"; string un=bn; int ct=0; while(existingValues.Contains(un)){ if(!nameCounts.ContainsKey(bn))nameCounts[bn]=1; ct=nameCounts[bn]++; un=$"{bn}_{ct}";} ResourceToNameMap[f]=un; existingValues.Add(un); if(!nameCounts.ContainsKey(bn))nameCounts[bn]=1; }} processList(Data.Extensions?.Cast<UndertaleNamedResource>().ToList()); UMT.Log($"Built map for {ResourceToNameMap.Count} named resources."); }
    private string GetResourceName(UndertaleResource res, string defaultName = "unknown_resource") { if (res!=null && ResourceToNameMap.TryGetValue(res, out string n)) return n; if(res is UndertaleChunk t) return SanitizeFileName($"resource_{t.GetType().Name}_{Guid.NewGuid().ToString("N").Substring(0,4)}"); return defaultName; }
    private void WriteJsonFile(string filePath, JObject jsonContent) { try { Directory.CreateDirectory(Path.GetDirectoryName(filePath)); File.WriteAllText(filePath, jsonContent.ToString(Formatting.Indented)); } catch (Exception ex) { UMT.Log($"ERROR writing JSON file {filePath}: {ex.Message}"); throw; } }
    private JObject CreateResourceReference(string name, Guid guid, string folder) { if(guid==Guid.Empty||string.IsNullOrEmpty(name))return null; string p; if(folder=="audiogroups"&&name=="audiogroup_default") p="audiogroups/audiogroup_default.yy"; else if(folder=="texturegroups"&&name=="Default") p="texturegroups/Default.yy"; else p=$"{folder}/{name}/{name}.yy"; return new JObject(new JProperty("name",name),new JProperty("path",p.Replace('\\','/'))); }
    private JObject CreateResourceReference(UndertaleResource res, string folder) { if(res==null)return null; string n=GetResourceName(res); if(string.IsNullOrEmpty(n)||n.StartsWith("unknown_"))return null; string k=$"{folder}/{n}"; Guid g=GetResourceGuid(k); return CreateResourceReference(n,g,folder); }


    // === Resource Conversion Functions ===

    private void ConvertSprites()
    {
        UMT.Log("Converting Sprites (incl. Backgrounds as Sprites)...");
        List<UndertaleSprite> allSprites = new List<UndertaleSprite>();
        if (Data.Sprites != null) allSprites.AddRange(Data.Sprites.Where(s => s?.Name?.Content != null));
        int initialSpriteCount = allSprites.Count; int bgConvertedCount = 0;
        if (Data.Backgrounds != null) { foreach(var bg in Data.Backgrounds.Where(b => b?.Texture?.TexturePage != null && b.Name?.Content != null)) { string bgName = GetResourceName(bg); if (allSprites.Any(s => GetResourceName(s) == bgName)) continue; var ps = new UndertaleSprite { Name=bg.Name, Width=bg.Texture.TexturePage.SourceWidth>0?bg.Texture.TexturePage.SourceWidth:bg.Texture.TexturePage.TargetWidth, Height=bg.Texture.TexturePage.SourceHeight>0?bg.Texture.TexturePage.SourceHeight:bg.Texture.TexturePage.TargetHeight, MarginLeft=0, MarginRight=(ushort)Math.Max(0,(bg.Texture.TexturePage.TargetWidth>0?bg.Texture.TexturePage.TargetWidth:1)-1), MarginBottom=(ushort)Math.Max(0,(bg.Texture.TexturePage.TargetHeight>0?bg.Texture.TexturePage.TargetHeight:1)-1), MarginTop=0, OriginX=0, OriginY=0, BBoxMode=UndertaleSprite.BoundingBoxMode.Automatic, SepMasks=0, PlaybackSpeed=15, PlaybackSpeedType=UndertaleSprite.SpritePlaybackSpeedType.FramesPerSecond, Textures=new List<UndertaleSprite.TextureEntry>{bg.Texture}}; if (ps.Width>0 && ps.Height>0) { allSprites.Add(ps); bgConvertedCount++; } } }
        UMT.Log($"Processing {initialSpriteCount} original sprites and {bgConvertedCount} backgrounds as sprites. Total: {allSprites.Count}."); if (!allSprites.Any()) return;
        string spriteDir = Path.Combine(OutputPath, "sprites"); int spriteProcessedCount = 0;

        foreach (var sprite in allSprites) {
            string spriteName = GetResourceName(sprite); string resourceKey = $"sprites/{spriteName}"; Guid spriteGuid = GetResourceGuid(resourceKey); string spritePath = Path.Combine(spriteDir, spriteName); string yyPath = Path.Combine(spritePath, $"{spriteName}.yy"); string imagesPath = Path.Combine(spritePath, "images");
            try {
                Directory.CreateDirectory(spritePath); Directory.CreateDirectory(imagesPath);
                List<JObject> frameList = new List<JObject>(); List<Guid> frameGuids = new List<Guid>(); Guid firstFrameGuid = Guid.Empty;
                for (int i = 0; i < sprite.Textures.Count; i++) { var texEntry = sprite.Textures[i]; if (texEntry?.TexturePage == null) continue; Guid fg = Guid.NewGuid(); frameGuids.Add(fg); if (i == 0) firstFrameGuid = fg; string fn = $"{fg}.png"; string fp = Path.Combine(imagesPath, fn); try { using (DirectBitmap bm = TextureWorker.GetTexturePageImageRect(texEntry.TexturePage, Data)) { if (bm?.Bitmap != null) bm.Bitmap.Save(fp, ImageFormat.Png); else { using (var p = new Bitmap(Math.Max(1, sprite.Width), Math.Max(1, sprite.Height), PixelFormat.Format32bppArgb)) using (var g = Graphics.FromImage(p)) { g.Clear(Color.FromArgb(128, 255, 0, 255)); p.Save(fp, ImageFormat.Png); } } } } catch (Exception ex) { UMT.Log($"ERROR extracting frame {i} for sprite '{spriteName}': {ex.Message}. Creating placeholder."); try { using (var p = new Bitmap(Math.Max(1, sprite.Width), Math.Max(1, sprite.Height), PixelFormat.Format32bppArgb)) using (var g = Graphics.FromImage(p)) { g.Clear(Color.FromArgb(128, 255, 0, 255)); p.Save(fp, ImageFormat.Png); } } catch {} } var fo = new JObject(new JProperty("Config", "Default"), new JProperty("FrameId", fg.ToString("D")), new JProperty("LayerId", null), new JProperty("resourceVersion", "1.0"), new JProperty("name", fg.ToString("N")), new JProperty("tags", new JArray()), new JProperty("resourceType", "GMSpriteFrame")); frameList.Add(fo); }
                if (frameGuids.Count == 0) { Guid fg = Guid.NewGuid(); frameGuids.Add(fg); firstFrameGuid = fg; string fn = $"{fg}.png"; string fp = Path.Combine(imagesPath, fn); try { using (var p = new Bitmap(Math.Max(1, sprite.Width), Math.Max(1, sprite.Height), PixelFormat.Format32bppArgb)) using (var g = Graphics.FromImage(p)) { g.Clear(Color.FromArgb(128, 0, 255, 255)); p.Save(fp, ImageFormat.Png); } var fo = new JObject( new JProperty("Config", "Default"), new JProperty("FrameId", fg.ToString("D")), new JProperty("LayerId", null), new JProperty("resourceVersion", "1.0"), new JProperty("name", fg.ToString("N")), new JProperty("tags", new JArray()), new JProperty("resourceType", "GMSpriteFrame")); frameList.Add(fo); } catch { continue; } }

                 int bbMode = 0; int collKind = 1; switch (sprite.BBoxMode) { case UndertaleSprite.BoundingBoxMode.FullImage: bbMode=1; break; case UndertaleSprite.BoundingBoxMode.Manual: bbMode=2; break; } if (sprite.SepMasks > 0) collKind = 0; else collKind = 1;
                 string texGrpName = "Default"; Guid texGrpGuid = GetResourceGuid("texturegroups/Default"); if (sprite.Textures.Count > 0 && sprite.Textures[0].TexturePage != null && Data.TextureGroups != null) { var grp = Data.TextureGroups.FirstOrDefault(tg => tg.Pages.Contains(sprite.Textures[0].TexturePage)); if(grp != null) { texGrpName = GetResourceName(grp); texGrpGuid = GetResourceGuid($"texturegroups/{texGrpName}"); } } JObject texGrpRef = CreateResourceReference(texGrpName, texGrpGuid, "texturegroups");
                 Guid imgLayerGuid = Guid.NewGuid(); var imgLayer = new JObject( new JProperty("visible", true), new JProperty("isLocked", false), new JProperty("blendMode", 0), new JProperty("opacity", 100.0), new JProperty("displayName", "default"), new JProperty("resourceVersion", "1.0"), new JProperty("name", imgLayerGuid.ToString("D")), new JProperty("tags", new JArray()), new JProperty("resourceType", "GMImageLayer") );
                 var framesTrack = new JObject( new JProperty("spriteId", null), new JProperty("keyframes", new JObject( new JProperty("Keyframes", new JArray( frameGuids.Select((guid, index) => new JObject( new JProperty("Key", (float)index), new JProperty("Length", 1.0f), new JProperty("Stretch", false), new JProperty("Disabled", false), new JProperty("IsCreationKey", false), new JProperty("Channels", new JObject( new JProperty("0", new JObject( new JProperty("Id", new JObject( new JProperty("name", guid.ToString("D")), new JProperty("path", $"sprites/{spriteName}/{spriteName}.yy") )), new JProperty("resourceVersion", "1.0"), new JProperty("resourceType", "SpriteFrameKeyframe") )) )), new JProperty("resourceVersion", "1.0"), new JProperty("resourceType", "Keyframe<SpriteFrameKeyframe>") )) )), new JProperty("resourceVersion", "1.0"), new JProperty("resourceType", "KeyframeStore<SpriteFrameKeyframe>") )), new JProperty("trackColour", 0), new JProperty("inheritsTrackColour", true), new JProperty("builtinName", 0), new JProperty("traits", 0), new JProperty("interpolation", 1), new JProperty("tracks", new JArray()), new JProperty("events", new JArray()), new JProperty("modifiers", new JArray()), new JProperty("isCreationTrack", false), new JProperty("resourceVersion", "1.0"), new JProperty("name", "frames"), new JProperty("tags", new JArray()), new JProperty("resourceType", "GMSpriteFramesTrack") );

                // ---- Sprite .yy Content ---- (*** Check commas carefully ***)
                var yyContent = new JObject(
                    new JProperty("bboxmode", bbMode),                               // Comma
                    new JProperty("collisionKind", collKind),                         // Comma
                    new JProperty("type", 0),                                           // Comma
                    new JProperty("origin", GetGMS2Origin(sprite.OriginX, sprite.OriginY, sprite.Width, sprite.Height)), // Comma
                    new JProperty("preMultiplyAlpha", false),                           // Comma
                    new JProperty("edgeFiltering", false),                             // Comma
                    new JProperty("collisionTolerance", 0),                             // Comma
                    new JProperty("swfPrecision", 2.525),                               // Comma
                    new JProperty("bbox_left", sprite.MarginLeft),                     // Comma
                    new JProperty("bbox_right", sprite.MarginRight),                   // Comma
                    new JProperty("bbox_top", sprite.MarginTop),                       // Comma
                    new JProperty("bbox_bottom", sprite.MarginBottom),                 // Comma
                    new JProperty("HTile", false),                                     // Comma
                    new JProperty("VTile", false),                                     // Comma
                    new JProperty("For3D", false),                                     // Comma
                    new JProperty("width", sprite.Width),                               // Comma
                    new JProperty("height", sprite.Height),                             // Comma
                    new JProperty("textureGroupId", texGrpRef),                         // Comma
                    new JProperty("swatchColours", null),                               // Comma
                    new JProperty("gridX", 0),                                         // Comma
                    new JProperty("gridY", 0),                                         // Comma
                    new JProperty("frames", new JArray(frameList)),                     // Comma
                    new JProperty("sequence", new JObject(                              // Sequence Object Start, Comma needed after this
                        new JProperty("timeUnits", 1),                                  // Comma
                        new JProperty("playback", 1),                                   // Comma
                        new JProperty("playbackSpeed", (float)sprite.PlaybackSpeed),     // Comma
                        new JProperty("playbackSpeedType", sprite.PlaybackSpeedType == UndertaleSprite.SpritePlaybackSpeedType.FramesPerSecond ? 1 : 0), // Comma
                        new JProperty("autoRecord", true),                              // Comma
                        new JProperty("volume", 1.0f),                                  // Comma
                        new JProperty("length", (float)frameGuids.Count),               // Comma
                        new JProperty("events", new JObject(new JProperty("Keyframes", new JArray()), new JProperty("resourceVersion", "1.0"), new JProperty("resourceType", "KeyframeStore<MessageEventKeyframe>"))), // Comma
                        new JProperty("moments", new JObject(new JProperty("Keyframes", new JArray()), new JProperty("resourceVersion", "1.0"), new JProperty("resourceType", "KeyframeStore<MomentsEventKeyframe>"))), // Comma
                        new JProperty("tracks", new JArray(framesTrack)),               // Comma
                        new JProperty("visibleRange", null),                            // Comma
                        new JProperty("lockOrigin", false),                             // Comma
                        new JProperty("showBackdrop", true),                            // Comma
                        new JProperty("showBackdropImage", false),                      // Comma
                        new JProperty("backdropImagePath", ""),                         // Comma
                        new JProperty("backdropImageOpacity", 0.5f),                    // Comma
                        new JProperty("backdropWidth", 1366),                           // Comma
                        new JProperty("backdropHeight", 768),                           // Comma
                        new JProperty("backdropXOffset", 0.0f),                         // Comma
                        new JProperty("backdropYOffset", 0.0f),                         // Comma
                        new JProperty("xorigin", sprite.OriginX),                       // Comma
                        new JProperty("yorigin", sprite.OriginY),                       // Comma
                        new JProperty("eventToFunction", new JObject()),                // Comma
                        new JProperty("eventStubScript", null),                         // Comma
                        new JProperty("parent", CreateResourceReference(spriteName, spriteGuid, "sprites")), // Comma
                        new JProperty("resourceVersion", "1.4"),                        // Comma
                        new JProperty("name", spriteName),                              // Comma
                        new JProperty("tags", new JArray()),                            // <<< *** ERROR FIX: NO Comma Here ***
                        new JProperty("resourceType", "GMSequence")                     // Last property in sequence, NO comma
                    )),                                                                 // End Sequence Object, Comma needed
                    new JProperty("layers", new JArray(imgLayer)),                      // Comma needed
                    new JProperty("parent", new JObject(                                // Comma needed
                        new JProperty("name", "Sprites"),
                        new JProperty("path", "folders/Sprites.yy")
                    )),
                    new JProperty("resourceVersion", "1.0"),                            // Comma needed
                    new JProperty("name", spriteName),                                  // Comma needed
                    new JProperty("tags", new JArray()),                                // Comma needed
                    new JProperty("resourceType", "GMSprite")                           // Last property, NO comma
                );
                // ---- End Sprite .yy Content ----

                WriteJsonFile(yyPath, yyContent);
                string relativePath = $"sprites/{spriteName}/{spriteName}.yy"; AddResourceToProject(spriteName, spriteGuid, relativePath, "GMSprite", "sprites"); ResourcePaths[resourceKey] = relativePath.Replace('\\', '/'); spriteProcessedCount++;
            } catch (Exception ex) { UMT.Log($"ERROR processing sprite '{spriteName}': {ex.Message}\n{ex.StackTrace}"); }
        }
         UMT.Log($"Sprite conversion finished. Processed {spriteProcessedCount} sprites.");
    }

    private int GetGMS2Origin(int x, int y, int w, int h) { /* As before */ if(x==0&&y==0)return 0; int mx=w/2; int my=h/2; int rx=Math.Max(0,w-1); int by=Math.Max(0,h-1); if(x==mx&&y==0)return 1; if(x==rx&&y==0)return 2; if(x==0&&y==my)return 3; if(x==mx&&y==my)return 4; if(x==rx&&y==my)return 5; if(x==0&&y==by)return 6; if(x==mx&&y==by)return 7; if(x==rx&&y==by)return 8; return 9; }
    private void ConvertSounds() { /* As before (v1.3) */ UMT.Log("Converting Sounds..."); if (Data.Sounds==null || !Data.Sounds.Any()) { UMT.Log("No sounds found."); return; } string sd=Path.Combine(OutputPath,"sounds"); int sc=0; foreach (var s in Data.Sounds.Where(x=>x?.Name?.Content!=null && x.AudioFile?.Data!=null)) { string sn=GetResourceName(s); string rk=$"sounds/{sn}"; Guid sg=GetResourceGuid(rk); string sp=Path.Combine(sd,sn); string yp=Path.Combine(sp,$"{sn}.yy"); string afn=GetCompatibleAudioFileName(s.AudioFile.Name.Content, sn); if(string.IsNullOrEmpty(afn))continue; string afp=Path.Combine(sp,afn); try { Directory.CreateDirectory(sp); File.WriteAllBytes(afp,s.AudioFile.Data); string agn="audiogroup_default"; Guid agg=GetResourceGuid("audiogroups/audiogroup_default"); if(Data.AudioGroups!=null){ var g=Data.AudioGroups.FirstOrDefault(ag=>ag.Sounds.Contains(s)); if(g!=null){agn=GetResourceName(g); agg=GetResourceGuid($"audiogroups/{agn}");}} JObject agr=CreateResourceReference(agn,agg,"audiogroups"); var yc=new JObject(new JProperty("compression",GetGMS2CompressionType(s.Type,Path.GetExtension(afp).ToLowerInvariant())), new JProperty("volume",(float)s.Volume), new JProperty("preload",s.Flags.HasFlag(UndertaleSound.AudioEntryFlags.Preload)), new JProperty("bitRate",128), new JProperty("sampleRate",44100), new JProperty("type",GetGMS2SoundType(s.Type)), new JProperty("bitDepth",1), new JProperty("audioGroupId",agr), new JProperty("soundFile",afn), new JProperty("duration",0.0f), new JProperty("parent",new JObject(new JProperty("name","Sounds"),new JProperty("path","folders/Sounds.yy"))), new JProperty("resourceVersion","1.0"), new JProperty("name",sn), new JProperty("tags",new JArray()), new JProperty("resourceType","GMSound")); WriteJsonFile(yp,yc); string rp=$"sounds/{sn}/{sn}.yy"; AddResourceToProject(sn,sg,rp,"GMSound","sounds"); ResourcePaths[rk]=rp.Replace('\\','/'); sc++; } catch (Exception ex) { UMT.Log($"ERROR processing sound '{sn}': {ex.Message}"); } } UMT.Log($"Sound conversion finished. Processed {sc} sounds."); }
    private string GetCompatibleAudioFileName(string o, string r) { /* As before */ string e=".ogg"; try { if(!string.IsNullOrEmpty(o)){ e=Path.GetExtension(o); if(string.IsNullOrEmpty(e)||e.Length<2)e=".ogg";} } catch { e=".ogg"; } string el=e.ToLowerInvariant(); if(el!=".wav"&&el!=".ogg"&&el!=".mp3")e=".ogg"; return r+e; }
    private int GetGMS2SoundType(UndertaleSound.AudioTypeFlags f) { return 1; }
    private int GetGMS2CompressionType(UndertaleSound.AudioTypeFlags f, string e) { bool s=f.HasFlag(UndertaleSound.AudioTypeFlags.StreamFromDisk); if(e==".wav")return s?2:0; else return s?3:1; }
    private void ConvertObjects() { /* As before (v1.3) */ UMT.Log("Converting Objects..."); if (Data.Objects == null || !Data.Objects.Any()) { UMT.Log("No objects found."); return; } string od = Path.Combine(OutputPath, "objects"); int oc = 0; foreach (var obj in Data.Objects.Where(o => o?.Name?.Content != null)) { string on = GetResourceName(obj); string rk = $"objects/{on}"; Guid og = GetResourceGuid(rk); string op = Path.Combine(od, on); string yp = Path.Combine(op, $"{on}.yy"); try { Directory.CreateDirectory(op); List<JObject> el = new List<JObject>(); if (obj.Events != null) { foreach (var ec in obj.Events) { if (ec == null) continue; foreach(var ev in ec) { if (ev == null) continue; bool hc = ev.Actions?.Any(a => a.LibID == 1 && a.Kind == 7) ?? false; if (!hc) continue; UndertaleCode ac = FindCodeForEvent(obj, ev.EventType, ev.EventSubtype); string gc = "// Event code not found or decompiled\n"; string gi = ""; if (ac?.Decompiled != null) { gc = ac.Decompiled.ToString(Data, true); if (gc.Contains("argument[")) gi += "// WARN: Uses argument[n].\n"; if (gc.Contains("self.")) gi += "// WARN: Uses self.\n"; if (!string.IsNullOrEmpty(gi)) gc = gi + gc; } else if (WARN_ON_MISSING_DECOMPILED_CODE) { UMT.Log($"Warn: No code for {on} Ev:{ev.EventType},{ev.EventSubtype}"); } GMS2EventMapping m = MapGMS1EventToGMS2(ev.EventType, ev.EventSubtype, on); if (m == null) continue; string gfn = m.IsCollisionEvent ? $"Collision_{m.GMS2EventTypeName}.gml" : $"{m.GMS2EventTypeName}_{m.GMS2EventNumber}.gml"; string gfp = Path.Combine(op, SanitizeFileName(gfn)); File.WriteAllText(gfp, gc); var ee = new JObject(new JProperty("collisionObjectId",m.CollisionObjectRef), new JProperty("eventNum",m.GMS2EventNumber), new JProperty("eventType",m.GMS2EventType), new JProperty("isDnD",false), new JProperty("resourceVersion","1.0"), new JProperty("name",""), new JProperty("tags",new JArray()), new JProperty("resourceType","GMEvent")); el.Add(ee); } } } JObject sr = CreateResourceReference(obj.Sprite, "sprites"); JObject pr = CreateResourceReference(obj.ParentId, "objects"); JObject mr = CreateResourceReference(obj.MaskSprite, "sprites"); var yc = new JObject(new JProperty("spriteId",sr), new JProperty("solid",obj.Solid), new JProperty("visible",obj.Visible), new JProperty("managed",true), new JProperty("persistent",obj.Persistent), new JProperty("parentObjectId",pr), new JProperty("maskSpriteId",mr), new JProperty("physicsObject",false), new JProperty("physicsSensor",false), new JProperty("physicsShape",1), new JProperty("physicsGroup",0), new JProperty("physicsDensity",0.5f), new JProperty("physicsRestitution",0.1f), new JProperty("physicsLinearDamping",0.1f), new JProperty("physicsAngularDamping",0.1f), new JProperty("physicsFriction",0.2f), new JProperty("physicsStartAwake",true), new JProperty("physicsKinematic",false), new JProperty("physicsShapePoints",new JArray()), new JProperty("eventList",new JArray(el)), new JProperty("properties",new JArray()), new JProperty("overriddenProperties",new JArray()), new JProperty("parent",new JObject(new JProperty("name","Objects"), new JProperty("path","folders/Objects.yy"))), new JProperty("resourceVersion","1.0"), new JProperty("name",on), new JProperty("tags",new JArray()), new JProperty("resourceType","GMObject")); WriteJsonFile(yp,yc); string rp=$"objects/{on}/{on}.yy"; AddResourceToProject(on,og,rp,"GMObject","objects"); ResourcePaths[rk]=rp.Replace('\\','/'); oc++; } catch (Exception ex) { UMT.Log($"ERROR processing object '{on}': {ex.Message}\n{ex.StackTrace}"); } } UMT.Log($"Object conversion finished. Processed {oc} objects."); }
    private UndertaleCode FindCodeForEvent(UndertaleObject o, UndertaleInstruction.EventType t, int st) { /* As before */ return null; /* Needs reliable UMT linking */ }
    private class GMS2EventMapping { public int GMS2EventType{get;set;} public int GMS2EventNumber{get;set;} public string GMS2EventTypeName{get;set;} public JObject CollisionObjectRef{get;set;}=null; public bool IsCollisionEvent=>CollisionObjectRef!=null; }
    private GMS2EventMapping MapGMS1EventToGMS2(UndertaleInstruction.EventType t, int st, string cn) { /* As before */ switch(t){ case UndertaleInstruction.EventType.Create: return new GMS2EventMapping{GMS2EventType=0,GMS2EventNumber=0,GMS2EventTypeName="Create"}; case UndertaleInstruction.EventType.Destroy: return new GMS2EventMapping{GMS2EventType=1,GMS2EventNumber=0,GMS2EventTypeName="Destroy"}; case UndertaleInstruction.EventType.Alarm: if(st>=0&&st<=11)return new GMS2EventMapping{GMS2EventType=2,GMS2EventNumber=st,GMS2EventTypeName=$"Alarm{st}"}; break; case UndertaleInstruction.EventType.Step: if(st>=0&&st<=2){string n=st==0?"Step":(st==1?"BeginStep":"EndStep"); return new GMS2EventMapping{GMS2EventType=3,GMS2EventNumber=st,GMS2EventTypeName=n};} break; case UndertaleInstruction.EventType.Collision: if(st>=0&&st<Data.Objects.Count){var o=Data.Objects[st]; if(o!=null){string n=GetResourceName(o); JObject r=CreateResourceReference(o,"objects"); if(r!=null)return new GMS2EventMapping{GMS2EventType=4,GMS2EventNumber=st,GMS2EventTypeName=n,CollisionObjectRef=r};}} break; case UndertaleInstruction.EventType.Keyboard: return new GMS2EventMapping{GMS2EventType=5,GMS2EventNumber=st,GMS2EventTypeName=$"Keyboard_{VirtualKeyToString(st)}"}; case UndertaleInstruction.EventType.Mouse: if(st>=0&&st<=11){string[] n={"LB","RB","MB","NB","LP","RP","MP","LR","RR","MR","Enter","Leave"}; string name=st<n.Length?n[st]:$"Mouse{st}"; return new GMS2EventMapping{GMS2EventType=6,GMS2EventNumber=st,GMS2EventTypeName=name};} return new GMS2EventMapping{GMS2EventType=6,GMS2EventNumber=st,GMS2EventTypeName=$"MouseRaw_{st}"}; case UndertaleInstruction.EventType.Other: if(st>=0&&st<=9){string[] n={"Outside","Boundary","GameStart","GameEnd","RoomStart","RoomEnd","AnimEnd","PathEnd","NoLives","NoHealth"}; if(st<n.Length)return new GMS2EventMapping{GMS2EventType=7,GMS2EventNumber=st,GMS2EventTypeName=n[st]};} else if(st>=10&&st<=25)return new GMS2EventMapping{GMS2EventType=7,GMS2EventNumber=st,GMS2EventTypeName=$"UserEvent{st-10}"}; break; case UndertaleInstruction.EventType.Draw: if(st==0)return new GMS2EventMapping{GMS2EventType=8,GMS2EventNumber=0,GMS2EventTypeName="Draw"}; else if(st==1)return new GMS2EventMapping{GMS2EventType=8,GMS2EventNumber=1,GMS2EventTypeName="DrawGUI"}; else if(st==75)return new GMS2EventMapping{GMS2EventType=8,GMS2EventNumber=75,GMS2EventTypeName="PreDraw"}; else if(st==76)return new GMS2EventMapping{GMS2EventType=8,GMS2EventNumber=76,GMS2EventTypeName="PostDraw"}; return new GMS2EventMapping{GMS2EventType=8,GMS2EventNumber=0,GMS2EventTypeName="Draw"}; case UndertaleInstruction.EventType.KeyPress: return new GMS2EventMapping{GMS2EventType=9,GMS2EventNumber=st,GMS2EventTypeName=$"KeyPress_{VirtualKeyToString(st)}"}; case UndertaleInstruction.EventType.KeyRelease: return new GMS2EventMapping{GMS2EventType=10,GMS2EventNumber=st,GMS2EventTypeName=$"KeyRelease_{VirtualKeyToString(st)}"}; case UndertaleInstruction.EventType.Trigger: break; default: break; } return null; }
    private string VirtualKeyToString(int vk) { try { var k=(Keys)vk; if(Enum.IsDefined(typeof(Keys),k))return k.ToString();} catch{} return vk.ToString(); }
    private void ConvertRooms() { /* As before (v1.3) */ UMT.Log("Converting Rooms..."); if (Data.Rooms==null || !Data.Rooms.Any()) { UMT.Log("No rooms found."); return; } string rd = Path.Combine(OutputPath, "rooms"); int rc = 0; foreach (var r in Data.Rooms.Where(rm => rm?.Name?.Content != null)) { string rn=GetResourceName(r); string rk=$"rooms/{rn}"; Guid rg=GetResourceGuid(rk); string rp=Path.Combine(rd,rn); string yp=Path.Combine(rp,$"{rn}.yy"); try { Directory.CreateDirectory(rp); var rs=new JObject(new JProperty("inheritRoomSettings",false),new JProperty("Width",r.Width),new JProperty("Height",r.Height),new JProperty("persistent",r.Persistent)); var sw=new JObject(new JProperty("isDnD",false),new JProperty("volume",1.0),new JProperty("parentRoom",null),new JProperty("sequenceId",null),new JProperty("roomSettings",rs),new JProperty("resourceVersion","1.0"),new JProperty("name","settings"),new JProperty("tags",new JArray()),new JProperty("resourceType","GMRoomSettings")); List<JObject> vl=new List<JObject>(); bool ev=r.ViewsEnabled&&r.Views!=null&&r.Views.Any(v=>v.Enabled); if(ev){for(int i=0;i<8;i++){var v=(i<r.Views.Count)?r.Views[i]:null; bool ie=v?.Enabled??false; JObject fr=null; if(ie&&v.ObjectId>=0&&v.ObjectId<Data.Objects.Count){var o=Data.Objects[v.ObjectId]; if(o!=null)fr=CreateResourceReference(o,"objects");} vl.Add(new JObject(new JProperty("inherit",false),new JProperty("visible",ie),new JProperty("xview",v?.ViewX??0),new JProperty("yview",v?.ViewY??0),new JProperty("wview",v?.ViewWidth??r.Width),new JProperty("hview",v?.ViewHeight??r.Height),new JProperty("xport",v?.PortX??0),new JProperty("yport",v?.PortY??0),new JProperty("wport",v?.PortWidth??r.Width),new JProperty("hport",v?.PortHeight??r.Height),new JProperty("hborder",v?.BorderX??32),new JProperty("vborder",v?.BorderY??32),new JProperty("hspeed",v?.SpeedX??-1),new JProperty("vspeed",v?.SpeedY??-1),new JProperty("objectId",fr),new JProperty("resourceVersion","1.0"),new JProperty("name",$"view_{i}"),new JProperty("tags",new JArray()),new JProperty("resourceType","GMView")));}} var vs=new JObject(new JProperty("inheritViewSettings",false),new JProperty("enableViews",ev),new JProperty("clearViewBackground",r.ClearDisplayBuffer),new JProperty("clearDisplayBuffer",r.ClearScreen),new JProperty("views",new JArray(vl))); var vw=new JObject(new JProperty("viewSettings",vs),new JProperty("resourceVersion","1.0"),new JProperty("name","views"),new JProperty("tags",new JArray()),new JProperty("resourceType","GMRoomViewSettings")); List<JObject> ll=new List<JObject>(); int cd=1000000; ll.Add(new JObject(new JProperty("visible",true),new JProperty("depth",cd),new JProperty("userdefined_depth",false),new JProperty("inheritLayerDepth",false),new JProperty("inheritLayerSettings",false),new JProperty("gridX",32),new JProperty("gridY",32),new JProperty("layers",new JArray()),new JProperty("hierarchyFrozen",false),new JProperty("effectEnabled",false),new JProperty("effectType",null),new JProperty("properties",new JArray()),new JProperty("isLocked",false),new JProperty("colour",ColorToGMS2JObject(r.BackgroundColor,true)),new JProperty("spriteId",null),new JProperty("htiled",false),new JProperty("vtiled",false),new JProperty("hspeed",0.0f),new JProperty("vspeed",0.0f),new JProperty("stretch",false),new JProperty("animationFPS",15.0f),new JProperty("animationSpeedType",0),new JProperty("resourceVersion","1.0"),new JProperty("name","Background"),new JProperty("tags",new JArray()),new JProperty("resourceType","GMRBackgroundLayer"))); cd-=100; if(r.Backgrounds!=null){foreach(var bg in r.Backgrounds.Where(b=>b.Enabled).OrderByDescending(b=>b.Depth)){JObject asr=null; string aln="asset_layer"; UndertaleBackground br=null; if(bg.BackgroundId>=0&&bg.BackgroundId<Data.Backgrounds.Count){br=Data.Backgrounds[bg.BackgroundId]; if(br!=null){asr=CreateResourceReference(br,"sprites"); aln=GetResourceName(br);}} if(asr==null)continue; ll.Add(new JObject(new JProperty("spriteId",asr),new JProperty("headPosition",0.0f),new JProperty("inheritLayerSettings",false),new JProperty("interpolation",1),new JProperty("isLocked",false),new JProperty("layers",new JArray()),new JProperty("name",SanitizeFileName($"{aln}_Asset_{Guid.NewGuid().ToString("N").Substring(0,4)}")),new JProperty("properties",new JArray()),new JProperty("resourceType","GMAssetLayer"),new JProperty("resourceVersion","1.0"),new JProperty("rotation",0.0f),new JProperty("scaleX",1.0f),new JProperty("scaleY",1.0f),new JProperty("sequenceId",null),new JProperty("skewX",0.0f),new JProperty("skewY",0.0f),new JProperty("tags",new JArray()),new JProperty("tint",0xFFFFFFFF),new JProperty("visible",true),new JProperty("x",(float)bg.X),new JProperty("y",(float)bg.Y),new JProperty("depth",bg.Depth),new JProperty("userdefined_depth",true),new JProperty("gridX",32),new JProperty("gridY",32),new JProperty("hierarchyFrozen",false),new JProperty("effectEnabled",false),new JProperty("effectType",null)));}} List<JObject> ir=new List<JObject>(); if(r.Instances!=null){foreach(var i in r.Instances.OrderBy(x=>x.InstanceID)){if(i.ObjectDefinition==null)continue; JObject or=CreateResourceReference(i.ObjectDefinition,"objects"); if(or==null)continue; string cc=ExtractCreationCode(i,rn); ir.Add(new JObject(new JProperty("properties",new JArray()),new JProperty("isDnD",false),new JProperty("objectId",or),new JProperty("inheritCode",false),new JProperty("hasCreationCode",!string.IsNullOrWhiteSpace(cc)&&cc!="// Creation code not found/decompiled."),new JProperty("colour",ColorToGMS2JObject(i.Color)),new JProperty("rotation",(float)i.Rotation),new JProperty("scaleX",(float)i.ScaleX),new JProperty("scaleY",(float)i.ScaleY),new JProperty("imageIndex",(int)(i.ImageIndex??0)),new JProperty("imageSpeed",(float)(i.ImageSpeed??1.0f)),new JProperty("inheritedItemId",null),new JProperty("frozen",false),new JProperty("ignore",false),new JProperty("inheritItemSettings",false),new JProperty("x",(float)i.X),new JProperty("y",(float)i.Y),new JProperty("resourceVersion","1.0"),new JProperty("name",Guid.NewGuid().ToString("D")),new JProperty("tags",new JArray()),new JProperty("resourceType","GMRInstance")));}} var il=new JObject(new JProperty("visible",true),new JProperty("depth",0),new JProperty("userdefined_depth",false),new JProperty("inheritLayerDepth",false),new JProperty("inheritLayerSettings",false),new JProperty("gridX",32),new JProperty("gridY",32),new JProperty("layers",new JArray()),new JProperty("hierarchyFrozen",false),new JProperty("effectEnabled",false),new JProperty("effectType",null),new JProperty("properties",new JArray()),new JProperty("isLocked",false),new JProperty("instances",new JArray(ir)),new JProperty("resourceVersion","1.0"),new JProperty("name","Instances"),new JProperty("tags",new JArray()),new JProperty("resourceType","GMRInstanceLayer")); ll.Add(il); cd-=10; if(r.Tiles!=null&&r.Tiles.Any()){UMT.Log($"Warn: Creating EMPTY Tile Layers for {rn}. MANUAL painting required."); foreach(var g in r.Tiles.Where(t=>t?.BackgroundDefinition!=null).GroupBy(t=>new{t.Depth,t.BackgroundDefinition}).OrderByDescending(grp=>grp.Key.Depth)){var d=g.Key.Depth; var b=g.Key.BackgroundDefinition; string tsn=GetResourceName(b); JObject tsr=CreateResourceReference(b,"tilesets"); if(tsr==null)continue; string tln=SanitizeFileName($"Tiles_{tsn}_{d}"); int gw=(r.Width+31)/32; int gh=(r.Height+31)/32; ll.Add(new JObject(new JProperty("tilesetId",tsr),new JProperty("x",0),new JProperty("y",0),new JProperty("visible",true),new JProperty("depth",d),new JProperty("userdefined_depth",true),new JProperty("inheritLayerDepth",false),new JProperty("inheritLayerSettings",false),new JProperty("gridX",32),new JProperty("gridY",32),new JProperty("layers",new JArray()),new JProperty("hierarchyFrozen",false),new JProperty("effectEnabled",false),new JProperty("effectType",null),new JProperty("properties",new JArray()),new JProperty("isLocked",false),new JProperty("tiles",new JObject(new JProperty("TileData",new JArray(Enumerable.Repeat(0,Math.Max(1,gw)*Math.Max(1,gh)))),new JProperty("SerialiseWidth",gw),new JProperty("SerialiseHeight",gh),new JProperty("TileSerialiseData",null))),new JProperty("tile_count",0),new JProperty("resourceVersion","1.0"),new JProperty("name",tln),new JProperty("tags",new JArray()),new JProperty("resourceType","GMRTileLayer")));}} string ccc=ExtractRoomCreationCode(r,rn); string ccfp=Path.Combine(rp,"RoomCreationCode.gml"); File.WriteAllText(ccfp,ccc); var lf=new JObject(new JProperty("visible",true),new JProperty("depth",0),new JProperty("userdefined_depth",false),new JProperty("inheritLayerDepth",true),new JProperty("inheritLayerSettings",true),new JProperty("gridX",32),new JProperty("gridY",32),new JProperty("layers",new JArray(ll)),new JProperty("hierarchyFrozen",false),new JProperty("effectEnabled",false),new JProperty("effectType",null),new JProperty("properties",new JArray()),new JProperty("isLocked",false),new JProperty("resourceVersion","1.0"),new JProperty("name","layers"),new JProperty("tags",new JArray()),new JProperty("resourceType","GMRLayerFolder")); var ico=new JArray(); foreach(JObject iNode in(JArray)il["instances"]){ico.Add(new JObject(new JProperty("name",iNode["name"].Value<string>()),new JProperty("path",yp.Replace('\\','/'))));} var yc=new JObject(new JProperty("isDnD",false),new JProperty("volume",1.0f),new JProperty("parentRoom",null),new JProperty("sequenceId",null),new JProperty("roomSettings",sw),new JProperty("viewSettings",vw),new JProperty("layers",new JArray(lf)),new JProperty("physicsSettings",new JObject(new JProperty("inheritPhysicsSettings",false),new JProperty("PhysicsWorld",false),new JProperty("PhysicsWorldGravityX",0.0f),new JProperty("PhysicsWorldGravityY",10.0f),new JProperty("PhysicsWorldPixToMetres",0.1f))),new JProperty("instanceCreationCode",new JObject()),new JProperty("inheritCode",false),new JProperty("instanceCreationOrder",ico),new JProperty("inheritCreationOrder",false),new JProperty("sequenceCreationOrder",new JArray()),new JProperty("useCats",false),new JProperty("cats",new JArray()),new JProperty("parent",new JObject(new JProperty("name","Rooms"),new JProperty("path","folders/Rooms.yy"))),new JProperty("creationCodeFile",Path.GetFileName(ccfp)),new JProperty("inheritGenerateOffsetY",false),new JProperty("generateOffsetY",0),new JProperty("resourceVersion","1.0"),new JProperty("name",rn),new JProperty("tags",new JArray()),new JProperty("resourceType","GMRoom")); WriteJsonFile(yp,yc); string rrp=$"rooms/{rn}/{rn}.yy"; AddResourceToProject(rn,rg,rrp,"GMRoom","rooms"); ResourcePaths[rk]=rrp.Replace('\\','/'); rc++; } catch (Exception ex) { UMT.Log($"ERROR processing room '{rn}': {ex.Message}\n{ex.StackTrace}"); } } UMT.Log($"Room conversion finished. Processed {rc} rooms."); }
    private string ExtractCreationCode(UndertaleRoom.Instance i, string rn) { /* As before */ string f="// Creation code not found/decompiled."; UndertaleCode c=null; if(i.CreationCode!=null)c=Data.Code?.FirstOrDefault(x=>x==i.CreationCode); else if(i.CreationCodeId!=uint.MaxValue)c=Data.Code?.FirstOrDefault(x=>x.Offset==i.CreationCodeId); if(c?.Decompiled!=null)return c.Decompiled.ToString(Data,true); if((i.CreationCode!=null||i.CreationCodeId!=uint.MaxValue)&&WARN_ON_MISSING_DECOMPILED_CODE)UMT.Log($"Warn: No code for Inst:{i.InstanceID} in {rn}."); return f; }
    private string ExtractRoomCreationCode(UndertaleRoom r, string rn) { /* As before */ string f="// Room Creation Code not found or decompiled.\n"; UndertaleCode c=null; if(r.CreationCode!=null)c=Data.Code?.FirstOrDefault(x=>x==r.CreationCode); else if(r.CreationCodeId!=uint.MaxValue)c=Data.Code?.FirstOrDefault(x=>x.Offset==r.CreationCodeId); if(c?.Decompiled!=null)return c.Decompiled.ToString(Data,true); if((r.CreationCode!=null||r.CreationCodeId!=uint.MaxValue)&&WARN_ON_MISSING_DECOMPILED_CODE)UMT.Log($"Warn: No code for room {rn}."); return f; }
    private JObject ColorToGMS2JObject(uint c, bool bg=false) { /* As before */ byte a=255,r=0,g=0,b=0; try{a=(byte)((c>>24)&0xFF);b=(byte)((c>>16)&0xFF);g=(byte)((c>>8)&0xFF);r=(byte)(c&0xFF);}catch{} return new JObject(new JProperty("r",r),new JProperty("g",g),new JProperty("b",b),new JProperty("a",a)); }
    private void ConvertScripts() { /* As before (v1.3) */ UMT.Log("Converting Scripts..."); if(Data.Scripts==null||!Data.Scripts.Any()){UMT.Log("No scripts found.");return;} string sd=Path.Combine(OutputPath,"scripts");int sc=0; foreach(var s in Data.Scripts.Where(x=>x?.Name?.Content!=null)){ string sn=GetResourceName(s);string rk=$"scripts/{sn}";Guid sg=GetResourceGuid(rk); string sp=Path.Combine(sd,sn);string yp=Path.Combine(sp,$"{sn}.yy");string gp=Path.Combine(sp,$"{sn}.gml"); try{ Directory.CreateDirectory(sp); string gc=$"function {sn}(){{\n\tshow_debug_message(\"Script {sn} not converted\");\n}}"; string cm=""; UndertaleCode ac=FindCodeForScript(s); if(ac?.Decompiled!=null){gc=ac.Decompiled.ToString(Data,true);string tc=gc.Trim(); if(!tc.StartsWith("function ")&&!tc.StartsWith("#define")){gc=$"function {sn}(){{\n{gc}\n}}"; cm+=$"// WARN: Auto-wrapped in function {sn}(). Verify.\n";} if(gc.Contains("argument["))cm+="// WARN: Uses deprecated argument[n].\n"; if(!string.IsNullOrEmpty(cm))gc=cm+gc; }else if(WARN_ON_MISSING_DECOMPILED_CODE){UMT.Log($"Warn: No code for Script {sn}.");} File.WriteAllText(gp,gc); var yc=new JObject(new JProperty("isDnD",false),new JProperty("isCompatibility",true),new JProperty("parent",new JObject(new JProperty("name","Scripts"),new JProperty("path","folders/Scripts.yy"))),new JProperty("resourceVersion","1.0"),new JProperty("name",sn),new JProperty("tags",new JArray()),new JProperty("resourceType","GMScript")); WriteJsonFile(yp,yc); string rp=$"scripts/{sn}/{sn}.yy"; AddResourceToProject(sn,sg,rp,"GMScript","scripts"); ResourcePaths[rk]=rp.Replace('\\','/'); sc++; }catch(Exception ex){UMT.Log($"ERROR processing script '{sn}': {ex.Message}");}} UMT.Log($"Script conversion finished. Processed {sc} scripts."); }
    private UndertaleCode FindCodeForScript(UndertaleScript s) { /* As before */ if(Data.Code==null||s==null)return null; string sn=GetResourceName(s); var c=Data.Code.FirstOrDefault(x=>x!=null&&GetResourceName(x)==sn); if(c==null&&s.Name?.Content!=null)c=Data.Code.FirstOrDefault(x=>x?.Name?.Content==s.Name.Content); return c; }
    private void ConvertShaders() { /* As before (v1.3) */ UMT.Log("Converting Shaders..."); if (Data.Shaders == null || !Data.Shaders.Any()) { UMT.Log("No shaders found."); return; } string sd = Path.Combine(OutputPath, "shaders"); int sc = 0; foreach (var s in Data.Shaders.Where(x => x?.Name?.Content != null)) { string sn = GetResourceName(s); string rk = $"shaders/{sn}"; Guid sg = GetResourceGuid(rk); string sp = Path.Combine(sd, sn); string yp = Path.Combine(sp, $"{sn}.yy"); string vp = Path.Combine(sp, $"{sn}.vsh"); string fp = Path.Combine(sp, $"{sn}.fsh"); try { Directory.CreateDirectory(sp); string vs = s.VertexShader?.Content ?? "// Vertex source missing"; string fs = s.FragmentShader?.Content ?? "// Fragment source missing"; File.WriteAllText(vp, vs); File.WriteAllText(fp, fs); var yc = new JObject(new JProperty("type", 1), new JProperty("parent", new JObject(new JProperty("name", "Shaders"), new JProperty("path", "folders/Shaders.yy"))), new JProperty("resourceVersion", "1.0"), new JProperty("name", sn), new JProperty("tags", new JArray()), new JProperty("resourceType", "GMShader")); WriteJsonFile(yp, yc); string rp = $"shaders/{sn}/{sn}.yy"; AddResourceToProject(sn, sg, rp, "GMShader", "shaders"); ResourcePaths[rk] = rp.Replace('\\', '/'); sc++; } catch (Exception ex) { UMT.Log($"ERROR processing shader '{sn}': {ex.Message}"); } } UMT.Log($"Shader conversion finished. Processed {sc} shaders."); }
    private void ConvertFonts() { /* As before (v1.3) */ UMT.Log("Converting Fonts..."); UMT.Log("WARN: Font conversion EXPERIMENTAL. MANUAL review/regen in GMS2 recommended."); if(Data.Fonts==null||!Data.Fonts.Any()){UMT.Log("No fonts found.");return;} string fd=Path.Combine(OutputPath,"fonts");int fc=0; foreach(var f in Data.Fonts.Where(x=>x?.Name?.Content!=null)){ string fn=GetResourceName(f);string rk=$"fonts/{fn}";Guid fg=GetResourceGuid(rk); string fp=Path.Combine(fd,fn);string yp=Path.Combine(fp,$"{fn}.yy"); try{ Directory.CreateDirectory(fp); string sf=f.FontName?.Content??"Arial"; int sz=(int)Math.Round(f.Size); bool b=f.Bold; bool i=f.Italic; uint fi=f.RangeStart; uint la=f.RangeEnd; if(la<fi)la=fi; JObject gsr=null; if(f.Texture?.TexturePage!=null){var ps=FindResourceByName<UndertaleSprite>(fn,Data.Sprites)??FindResourceByName<UndertaleBackground>(fn,Data.Backgrounds); if(ps!=null)gsr=CreateResourceReference(ps,"sprites");} var yc=new JObject(new JProperty("sourceFontName",sf),new JProperty("size",sz),new JProperty("bold",b),new JProperty("italic",i),new JProperty("antiAlias",Math.Max(1,f.AntiAlias)),new JProperty("charset",255),new JProperty("first",fi),new JProperty("last",la),new JProperty("characterMap",null),new JProperty("glyphOperations",new JArray()),new JProperty("textureGroupId",CreateResourceReference("Default",GetResourceGuid("texturegroups/Default"),"texturegroups")),new JProperty("styleName","Regular"),new JProperty("kerningPairs",new JArray()),new JProperty("includesTTF",false),new JProperty("TTFName",""),new JProperty("ascender",0),new JProperty("descender",0),new JProperty("lineHeight",0),new JProperty("glyphs",new JObject()),new JProperty("parent",new JObject(new JProperty("name","Fonts"),new JProperty("path","folders/Fonts.yy"))),new JProperty("resourceVersion","1.0"),new JProperty("name",fn),new JProperty("tags",new JArray()),new JProperty("resourceType","GMFont")); WriteJsonFile(yp,yc); string rp=$"fonts/{fn}/{fn}.yy"; AddResourceToProject(fn,fg,rp,"GMFont","fonts"); ResourcePaths[rk]=rp.Replace('\\','/'); fc++; }catch(Exception ex){UMT.Log($"ERROR processing font '{fn}': {ex.Message}");}} UMT.Log($"Font conversion finished. Processed {fc} fonts."); }
    private void ConvertTilesets() { /* As before (v1.3) */ UMT.Log("Converting Tilesets..."); UMT.Log("WARN: Tileset properties GUESSED. MANUAL adjustment required."); string td=Path.Combine(OutputPath,"tilesets"); int tc=0; HashSet<UndertaleResource> uss=new HashSet<UndertaleResource>(); if(Data.Rooms!=null){foreach(var r in Data.Rooms.Where(x=>x?.Tiles!=null)){foreach(var t in r.Tiles.Where(x=>x?.BackgroundDefinition!=null)){uss.Add(t.BackgroundDefinition);}}} if(!uss.Any()){UMT.Log("No tileset sources identified.");return;} UMT.Log($"Found {uss.Count} unique tileset sources."); foreach(var sr in uss.Where(x=>x!=null)){ string sn=GetResourceName(sr); JObject ssr=CreateResourceReference(sr,"sprites"); if(ssr==null){UMT.Log($"Warn: Cannot find Sprite '{sn}' for Tileset. Skipping.");continue;} string tsn=sn; string rk=$"tilesets/{tsn}"; Guid tg=GetResourceGuid(rk); string tp=Path.Combine(td,tsn); string yp=Path.Combine(tp,$"{tsn}.yy"); try{ Directory.CreateDirectory(tp); int tw=16,th=16,sx=0,sy=0,ox=0,oy=0,sw=0,sh=0; if(sr is UndertaleBackground b && b.Texture?.TexturePage!=null){sw=b.Texture.TexturePage.SourceWidth>0?b.Texture.TexturePage.SourceWidth:b.Texture.TexturePage.TargetWidth; sh=b.Texture.TexturePage.SourceHeight>0?b.Texture.TexturePage.SourceHeight:b.Texture.TexturePage.TargetHeight;} else if(sr is UndertaleSprite s){sw=s.Width;sh=s.Height;} int cols=(sw>0&&tw>0)?Math.Max(1,(sw-ox*2+sx)/(tw+sx)):1; int rows=(sh>0&&th>0)?Math.Max(1,(sh-oy*2+sy)/(th+sy)):1; int tcnt=cols*rows; var yc=new JObject(new JProperty("spriteId",ssr),new JProperty("tileWidth",tw),new JProperty("tileHeight",th),new JProperty("tilexoff",ox),new JProperty("tileyoff",oy),new JProperty("tilehsep",sx),new JProperty("tilevsep",sy),new JProperty("spriteNoExport",false),new JProperty("textureGroupId",CreateResourceReference("Default",GetResourceGuid("texturegroups/Default"),"texturegroups")),new JProperty("out_tilehborder",2),new JProperty("out_tilevborder",2),new JProperty("out_columns",cols),new JProperty("tile_count",tcnt),new JProperty("autoTileSets",new JArray()),new JProperty("tileAnimationFrames",new JArray()),new JProperty("tileAnimationSpeed",15.0f),new JProperty("macroPageTiles",new JObject(new JProperty("SerialiseWidth",cols),new JProperty("SerialiseHeight",rows),new JProperty("TileSerialiseData",new JArray()))),new JProperty("parent",new JObject(new JProperty("name","Tilesets"),new JProperty("path","folders/Tilesets.yy"))),new JProperty("resourceVersion","1.0"),new JProperty("name",tsn),new JProperty("tags",new JArray()),new JProperty("resourceType","GMTileSet")); WriteJsonFile(yp,yc); string rp=$"tilesets/{tsn}/{tsn}.yy"; AddResourceToProject(tsn,tg,rp,"GMTileSet","tilesets"); ResourcePaths[rk]=rp.Replace('\\','/'); tc++; }catch(Exception ex){UMT.Log($"ERROR processing tileset '{tsn}': {ex.Message}");}} UMT.Log($"Tileset conversion finished. Processed {tc} tilesets."); }
    private T FindResourceByName<T>(string n, IEnumerable<T> l) where T:UndertaleNamedResource { if(l==null||string.IsNullOrEmpty(n))return null; return l.FirstOrDefault(i=>i!=null&&GetResourceName(i)==n); }
    private void ConvertPaths() { /* As before (v1.3) */ UMT.Log("Converting Paths..."); if (Data.Paths==null || !Data.Paths.Any()) { UMT.Log("No paths found."); return; } string pd=Path.Combine(OutputPath,"paths"); int pc=0; foreach (var p in Data.Paths.Where(x=>x?.Name?.Content!=null)) { string pn=GetResourceName(p); string rk=$"paths/{pn}"; Guid pg=GetResourceGuid(rk); string pp=Path.Combine(pd,pn); string yp=Path.Combine(pp,$"{pn}.yy"); try { Directory.CreateDirectory(pp); List<JObject> pts=p.Points?.Select(pt=>new JObject(new JProperty("speed",(float)pt.Speed),new JProperty("x",(float)pt.X),new JProperty("y",(float)pt.Y))).ToList()??new List<JObject>(); var yc=new JObject(new JProperty("kind",p.Smooth?1:0),new JProperty("closed",p.Closed),new JProperty("precision",(int)p.Precision),new JProperty("points",new JArray(pts)),new JProperty("parent",new JObject(new JProperty("name","Paths"),new JProperty("path","folders/Paths.yy"))),new JProperty("resourceVersion","1.0"),new JProperty("name",pn),new JProperty("tags",new JArray()),new JProperty("resourceType","GMPath")); WriteJsonFile(yp,yc); string rp=$"paths/{pn}/{pn}.yy"; AddResourceToProject(pn,pg,rp,"GMPath","paths"); ResourcePaths[rk]=rp.Replace('\\','/'); pc++; } catch (Exception ex) { UMT.Log($"ERROR processing path '{pn}': {ex.Message}"); } } UMT.Log($"Path conversion finished. Processed {pc} paths."); }
    private void ConvertTimelines() { /* As before (v1.3) */ UMT.Log("Converting Timelines..."); UMT.Log("WARN: Timeline code needs manual setup."); if (Data.Timelines==null || !Data.Timelines.Any()) { UMT.Log("No timelines found."); return; } string td=Path.Combine(OutputPath,"timelines"); int tc=0; foreach (var tl in Data.Timelines.Where(x=>x?.Name?.Content!=null)) { string tln=GetResourceName(tl); string rk=$"timelines/{tln}"; Guid tlg=GetResourceGuid(rk); string tp=Path.Combine(td,tln); string yp=Path.Combine(tp,$"{tln}.yy"); try { Directory.CreateDirectory(tp); List<JObject> mmts=new List<JObject>(); if (tl.Moments!=null) { foreach(var m in tl.Moments) { UndertaleCode mc=FindCodeForTimelineMoment(tl,m); string gc="// Code not resolved"; if(mc?.Decompiled!=null)gc=mc.Decompiled.ToString(Data,true); var me=new JObject(new JProperty("collisionObjectId",null),new JProperty("eventNum",0),new JProperty("eventType",7),new JProperty("isDnD",false),new JProperty("resourceVersion","1.0"),new JProperty("name",""),new JProperty("tags",new JArray()),new JProperty("resourceType","GMEvent")); mmts.Add(new JObject(new JProperty("moment",m.Moment),new JProperty("evnt",me),new JProperty("resourceVersion","1.0"),new JProperty("name",""),new JProperty("tags",new JArray()),new JProperty("resourceType","GMMoment"))); } } var yc=new JObject(new JProperty("momentList",new JArray(mmts)),new JProperty("parent",new JObject(new JProperty("name","Timelines"),new JProperty("path","folders/Timelines.yy"))),new JProperty("resourceVersion","1.0"),new JProperty("name",tln),new JProperty("tags",new JArray()),new JProperty("resourceType","GMTimeline")); WriteJsonFile(yp,yc); string rp=$"timelines/{tln}/{tln}.yy"; AddResourceToProject(tln,tlg,rp,"GMTimeline","timelines"); ResourcePaths[rk]=rp.Replace('\\','/'); tc++; } catch (Exception ex) { UMT.Log($"ERROR processing timeline '{tln}': {ex.Message}"); } } UMT.Log($"Timeline conversion finished. Processed {tc} timelines."); }
    private UndertaleCode FindCodeForTimelineMoment(UndertaleTimeline tl, UndertaleTimelineMoment m) { /* As before */ if(Data.Code==null||tl==null||m?.Actions==null)return null; var ca=m.Actions.FirstOrDefault(a=>a.LibID==1&&a.Kind==7); if(ca==null)return null; return null; /* Needs UMT logic */ }
    private void ConvertIncludedFiles() { /* As before (v1.3) */ UMT.Log("Converting Included Files..."); if (Data.IncludedFiles==null || !Data.IncludedFiles.Any()){UMT.Log("No included files found.");return;} string dd=Path.Combine(OutputPath,"datafiles"); string id=Path.Combine(OutputPath,"includedfiles"); int fc=0; foreach(var f in Data.IncludedFiles.Where(x=>x?.Name?.Content!=null&&x.Data!=null)){ string rn=GetResourceName(f); string op=f.Name.Content; string tfn=Path.GetFileName(op); if(string.IsNullOrEmpty(tfn))tfn=rn; tfn=SanitizeFileName(tfn); string tfp=Path.Combine(dd,tfn); int ctr=1; string bn=Path.GetFileNameWithoutExtension(tfn); string ex=Path.GetExtension(tfn); while(File.Exists(tfp)||Directory.Exists(tfp)){tfn=$"{bn}_{ctr}{ex}";tfp=Path.Combine(dd,tfn);ctr++;} string rk=$"includedfiles/{rn}"; Guid fg=GetResourceGuid(rk); string yp=Path.Combine(id,$"{rn}.yy"); try{ File.WriteAllBytes(tfp,f.Data); var yc=new JObject(new JProperty("ConfigValues",new JObject()),new JProperty("fileName",tfn),new JProperty("filePath","datafiles"),new JProperty("outputFolder",""),new JProperty("removeEnd",false),new JProperty("store",false),new JProperty("ConfigOptions",new JObject()),new JProperty("debug",false),new JProperty("exportAction",0),new JProperty("exportDir",""),new JProperty("overwrite",false),new JProperty("freeData",false),new JProperty("origName",op),new JProperty("parent",new JObject(new JProperty("name","Included Files"),new JProperty("path","folders/Included Files.yy"))),new JProperty("resourceVersion","1.0"),new JProperty("name",rn),new JProperty("tags",new JArray()),new JProperty("resourceType","GMIncludedFile")); WriteJsonFile(yp,yc); string rp=$"includedfiles/{rn}.yy"; AddResourceToProject(rn,fg,rp,"GMIncludedFile","includedfiles"); ResourcePaths[rk]=rp.Replace('\\','/'); fc++; }catch(Exception ex){UMT.Log($"ERROR processing included file '{rn}': {ex.Message}");}} UMT.Log($"Included File conversion finished. Processed {fc} files."); }
    private void ConvertAudioGroups() { /* As before (v1.3) */ UMT.Log("Converting Audio Groups..."); string ad=Path.Combine(OutputPath,"audiogroups"); int ac=0; string dan="audiogroup_default"; Guid dag=GetResourceGuid($"audiogroups/{dan}"); string dyp=Path.Combine(ad,$"{dan}.yy"); string drp=$"audiogroups/{dan}.yy"; ResourcePaths[$"audiogroups/{dan}"]=drp; if(!File.Exists(dyp)){var c=new JObject(new JProperty("targets",-1L),new JProperty("parent",new JObject(new JProperty("name","Audio Groups"),new JProperty("path","folders/Audio Groups.yy"))),new JProperty("resourceVersion","1.0"),new JProperty("name",dan),new JProperty("tags",new JArray()),new JProperty("resourceType","GMAudioGroup")); WriteJsonFile(dyp,c); AddResourceToProject(dan,dag,drp,"GMAudioGroup","audiogroups"); ac++;} if(Data.AudioGroups!=null){foreach(var ag in Data.AudioGroups.Where(x=>x?.Name?.Content!=null)){string an=GetResourceName(ag); if(an==dan)continue; string rk=$"audiogroups/{an}"; Guid agd=GetResourceGuid(rk); string ayp=Path.Combine(ad,$"{an}.yy"); try{var c=new JObject(new JProperty("targets",-1L),new JProperty("parent",new JObject(new JProperty("name","Audio Groups"),new JProperty("path","folders/Audio Groups.yy"))),new JProperty("resourceVersion","1.0"),new JProperty("name",an),new JProperty("tags",new JArray()),new JProperty("resourceType","GMAudioGroup")); WriteJsonFile(ayp,c); string arp=$"audiogroups/{an}.yy"; AddResourceToProject(an,agd,arp,"GMAudioGroup","audiogroups"); ResourcePaths[rk]=arp.Replace('\\','/'); ac++;}catch(Exception ex){UMT.Log($"ERROR processing audio group '{an}': {ex.Message}");}}} UMT.Log($"Audio Group conversion finished. Processed {ac} groups."); }
    private void ConvertTextureGroups() { /* As before (v1.3) */ UMT.Log("Converting Texture Groups..."); string td=Path.Combine(OutputPath,"texturegroups"); int tc=0; string dtn="Default"; Guid dtg=GetResourceGuid($"texturegroups/{dtn}"); string dyp=Path.Combine(td,$"{dtn}.yy"); string drp=$"texturegroups/{dtn}.yy"; ResourcePaths[$"texturegroups/{dtn}"]=drp; if(!File.Exists(dyp)){var c=new JObject(new JProperty("isScaled",true),new JProperty("autocrop",true),new JProperty("border",2),new JProperty("mipsToGenerate",0),new JProperty("groupParent",null),new JProperty("targets",-1L),new JProperty("loadImmediately",false),new JProperty("parent",new JObject(new JProperty("name","Texture Groups"),new JProperty("path","folders/Texture Groups.yy"))),new JProperty("resourceVersion","1.0"),new JProperty("name",dtn),new JProperty("tags",new JArray()),new JProperty("resourceType","GMTextureGroup")); WriteJsonFile(dyp,c); AddResourceToProject(dtn,dtg,drp,"GMTextureGroup","texturegroups"); tc++;} if(Data.TextureGroups!=null){foreach(var tg in Data.TextureGroups.Where(x=>x?.Name?.Content!=null)){string tn=GetResourceName(tg); if(tn==dtn)continue; string rk=$"texturegroups/{tn}"; Guid tgg=GetResourceGuid(rk); string typ=Path.Combine(td,$"{tn}.yy"); try{var c=new JObject(new JProperty("isScaled",true),new JProperty("autocrop",true),new JProperty("border",2),new JProperty("mipsToGenerate",0),new JProperty("groupParent",null),new JProperty("targets",-1L),new JProperty("loadImmediately",false),new JProperty("parent",new JObject(new JProperty("name","Texture Groups"),new JProperty("path","folders/Texture Groups.yy"))),new JProperty("resourceVersion","1.0"),new JProperty("name",tn),new JProperty("tags",new JArray()),new JProperty("resourceType","GMTextureGroup")); WriteJsonFile(typ,c); string trp=$"texturegroups/{tn}.yy"; AddResourceToProject(tn,tgg,trp,"GMTextureGroup","texturegroups"); ResourcePaths[rk]=trp.Replace('\\','/'); tc++;}catch(Exception ex){UMT.Log($"ERROR processing texture group '{tn}': {ex.Message}");}}} UMT.Log($"Texture Group conversion finished. Processed {tc} groups."); }
    private void ConvertExtensions() { /* As before (v1.3) */ UMT.Log("Converting Extensions (Basic Structure)..."); if (Data.Extensions==null || !Data.Extensions.Any()) { UMT.Log("No extensions found."); return; } string ed=Path.Combine(OutputPath,"extensions"); int ec=0; foreach (var e in Data.Extensions.Where(x=>x?.Name?.Content!=null)) { string en=GetResourceName(e); string rk=$"extensions/{en}"; Guid eg=GetResourceGuid(rk); string ep=Path.Combine(ed,en); string yp=Path.Combine(ep,$"{en}.yy"); try { Directory.CreateDirectory(ep); var yc = new JObject(new JProperty("options",new JArray()),new JProperty("exportToGame",true),new JProperty("supportedTargets",-1L),new JProperty("extensionVersion",e.Version?.Content??"1.0.0"),new JProperty("packageId",""),new JProperty("productId",""),new JProperty("author",""),new JProperty("date",DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")),new JProperty("license",""),new JProperty("description",e.FolderName?.Content??""),new JProperty("helpfile",""),new JProperty("iosProps",true),new JProperty("tvosProps",true),new JProperty("androidProps",true),new JProperty("installdir",""),new JProperty("classname",e.ClassName?.Content??""),new JProperty("IncludedResources",new JArray()),new JProperty("androidPermissions",new JArray()),new JProperty("copyToTargets",-1L),new JProperty("parent",new JObject(new JProperty("name","Extensions"),new JProperty("path","folders/Extensions.yy"))),new JProperty("resourceVersion","1.2"),new JProperty("name",en),new JProperty("tags",new JArray()),new JProperty("resourceType","GMExtension")); WriteJsonFile(yp,yc); string rp=$"extensions/{en}/{en}.yy"; AddResourceToProject(en,eg,rp,"GMExtension","extensions"); ResourcePaths[rk]=rp.Replace('\\','/'); ec++; UMT.Log($"Warn: Extension '{en}' created. Files/functions need manual setup."); } catch (Exception ex) { UMT.Log($"ERROR processing extension '{en}': {ex.Message}"); } } UMT.Log($"Extension conversion finished. Processed {ec} extensions."); }
    private void ConvertNotes() { /* As before */ UMT.Log("Skipping Notes conversion."); if (!FolderStructure.ContainsKey("notes")) FolderStructure["notes"] = new List<string>(); }
    private void AddResourceToProject(string n, Guid g, string p, string t, string fk) { /* As before */ string gs=g.ToString("D"); if(ResourceList.Any(r=>r["id"]?["name"]?.ToString()==gs))return; ResourceList.Add(new JObject(new JProperty("id",new JObject(new JProperty("name",gs),new JProperty("path",p.Replace('\\','/')))),new JProperty("order",0))); if(!FolderStructure.TryGetValue(fk,out var gl)){gl=new List<string>();FolderStructure[fk]=gl;} if(!gl.Contains(gs))gl.Add(gs); }
    private void CreateProjectFile() { /* As before (v1.3) */ string yp = Path.Combine(OutputPath, $"{ProjectName}.yyp"); var fd = new List<Tuple<string, string, string>> { Tuple.Create("sprites","GMSprite","Sprites"), Tuple.Create("tilesets","GMTileSet","Tile Sets"), Tuple.Create("sounds","GMSound","Sounds"), Tuple.Create("paths","GMPath","Paths"), Tuple.Create("scripts","GMScript","Scripts"), Tuple.Create("shaders","GMShader","Shaders"), Tuple.Create("fonts","GMFont","Fonts"), Tuple.Create("timelines","GMTimeline","Timelines"), Tuple.Create("objects","GMObject","Objects"), Tuple.Create("rooms","GMRoom","Rooms"), Tuple.Create("notes","GMNote","Notes"), Tuple.Create("extensions","GMExtension","Extensions"), Tuple.Create("audiogroups","GMAudioGroup","Audio Groups"), Tuple.Create("texturegroups","GMTextureGroup","Texture Groups"), Tuple.Create("includedfiles","GMIncludedFile","Included Files") }; foreach(var d in fd) if(!FolderStructure.ContainsKey(d.Item1)) FolderStructure[d.Item1] = new List<string>(); List<JObject> fv = new List<JObject>(); string fmd = Path.Combine(OutputPath, "folders"); Directory.CreateDirectory(fmd); foreach (var d in fd) { string fk=d.Item1; string rt=d.Item2; string dn=d.Item3; Guid fg=GetResourceGuid($"folders/{dn}"); string fmp=Path.Combine(fmd,$"{dn}.yy"); string fmrp=$"folders/{dn}.yy".Replace('\\','/'); fv.Add(new JObject(new JProperty("folderPath",fmrp), new JProperty("order",fv.Count), new JProperty("resourceVersion","1.0"), new JProperty("tags",new JArray()), new JProperty("resourceType","GMFolder"))); var fyc = new JObject(new JProperty("isDefaultView",true), new JProperty("localisedFolderName",$"ResourceTree_{dn.Replace(" ","")}"), new JProperty("filterType",rt), new JProperty("folderName",dn), new JProperty("isResourceFolder",true), new JProperty("resourceVersion","1.0"), new JProperty("name",dn), new JProperty("tags",new JArray()), new JProperty("resourceType","GMFolder")); WriteJsonFile(fmp,fyc); } var ron=new JArray(); if(Data.Rooms!=null){foreach(var r in Data.Rooms.Where(x=>x!=null)){string rn=GetResourceName(r); string rk=$"rooms/{rn}"; if(ResourceGuids.TryGetValue(rk,out Guid rg)&&ResourcePaths.TryGetValue(rk,out string rp)){ron.Add(new JObject(new JProperty("roomId",new JObject(new JProperty("name",rg.ToString("D")),new JProperty("path",rp.Replace('\\','/')))),new JProperty("category","DEFAULT")));}}} var yc=new JObject(new JProperty("projectName",ProjectName), new JProperty("projectDir",""), new JProperty("packageName",ProjectName), new JProperty("packageDir",""), new JProperty("constants",new JArray()), new JProperty("configs",new JObject(new JProperty("name","Default"),new JProperty("children",new JArray()))), new JProperty("RoomOrderNodes",ron), new JProperty("Folders",new JArray(fv)), new JProperty("resources",new JArray(ResourceList)), new JProperty("Options",new JArray(new JObject(new JProperty("name","Main"),new JProperty("path","options/main/options_main.yy")), new JObject(new JProperty("name","Windows"),new JProperty("path","options/windows/options_windows.yy")))), new JProperty("defaultScriptType",1), new JProperty("isEcma",false), new JProperty("tutorialPath",""), new JProperty("AudioGroups",new JArray(ResourceList.Where(r=>r["id"]["path"].ToString().StartsWith("audiogroups/")).Select(r=>r["id"].DeepClone()))), new JProperty("TextureGroups",new JArray(ResourceList.Where(r=>r["id"]["path"].ToString().StartsWith("texturegroups/")).Select(r=>r["id"].DeepClone()))), new JProperty("IncludedFiles",new JArray(ResourceList.Where(r=>r["id"]["path"].ToString().StartsWith("includedfiles/")).Select(r=>r["id"].DeepClone()))), new JProperty("MetaData",new JObject(new JProperty("IDEVersion",GMS2_VERSION))), new JProperty("projectVersion","1.0"), new JProperty("packageId",""), new JProperty("productId",""), new JProperty("parentProject",null), new JProperty("YYPFormat","1.2"), new JProperty("serialiseFrozenViewModels",false), new JProperty("resourceVersion","1.7"), new JProperty("name",ProjectName), new JProperty("tags",new JArray()), new JProperty("resourceType","GMProject")); WriteJsonFile(yp,yc); UMT.Log($"Project file created: {yp}"); }
    private void CreateOptionsFiles() { /* As before (v1.3) */ string mod = Path.Combine(OutputPath, "options", "main"); string wod = Path.Combine(OutputPath, "options", "windows"); Directory.CreateDirectory(mod); Directory.CreateDirectory(wod); string mop = Path.Combine(mod, "options_main.yy"); var mo = new JObject(new JProperty("option_gameguid",ProjectGuid.ToString("D")), new JProperty("option_gameid",Data.GeneralInfo?.GameID?.ToString()??"0"), new JProperty("option_game_speed",Data.GeneralInfo?.GameSpeed??60), new JProperty("option_mips_for_3d_textures",false), new JProperty("option_draw_colour",0xFFFFFFFF), new JProperty("option_window_colour",0xFF000000), new JProperty("option_steam_app_id",Data.GeneralInfo?.SteamAppID?.ToString()??"0"), new JProperty("option_sci_usesci",false), new JProperty("option_author",Data.GeneralInfo?.Author?.Content??""), new JProperty("option_collision_compatibility",true), new JProperty("option_copy_on_write_enabled",Data.GeneralInfo?.CopyOnWriteEnabled??false), new JProperty("option_lastchanged",DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss")), new JProperty("option_spine_licence",false), new JProperty("option_template_image","${base_options_dir}/main/template_image.png"), new JProperty("option_template_icon","${base_options_dir}/main/template_icon.ico"), new JProperty("option_template_description",null), new JProperty("resourceVersion","1.4"), new JProperty("name","Main"), new JProperty("tags",new JArray()), new JProperty("resourceType","GMMainOptions")); WriteJsonFile(mop,mo); string wop = Path.Combine(wod,"options_windows.yy"); string v="1.0.0.0"; if(Data.GeneralInfo?.Version!=null) v=$"{Data.GeneralInfo.Version.Major}.{Data.GeneralInfo.Version.Minor}.{Data.GeneralInfo.Version.Release}.{Data.GeneralInfo.Version.Build}"; var wo = new JObject(new JProperty("option_windows_display_name",Data.GeneralInfo?.DisplayName?.Content??ProjectName), new JProperty("option_windows_executable_name",$"${{project_name}}.exe"), new JProperty("option_windows_version",v), new JProperty("option_windows_company_info",Data.GeneralInfo?.Company?.Content??Data.GeneralInfo?.Author?.Content??""), new JProperty("option_windows_product_info",Data.GeneralInfo?.Product?.Content??ProjectName), new JProperty("option_windows_copyright_info",Data.GeneralInfo?.Copyright?.Content??$"(c) {DateTime.Now.Year}"), new JProperty("option_windows_description_info",Data.GeneralInfo?.Description?.Content??ProjectName), new JProperty("option_windows_display_cursor",true), new JProperty("option_windows_icon","${base_options_dir}/windows/icons/icon.ico"), new JProperty("option_windows_save_location",0), new JProperty("option_windows_splash_screen","${base_options_dir}/windows/splash/splash.png"), new JProperty("option_windows_use_splash",false), new JProperty("option_windows_start_fullscreen",false), new JProperty("option_windows_allow_fullscreen_switching",true), new JProperty("option_windows_interpolate_pixels",Data.GeneralInfo?.InterpolatePixels??false), new JProperty("option_windows_vsync",false), new JProperty("option_windows_resize_window",true), new JProperty("option_windows_borderless",false), new JProperty("option_windows_scale",0), new JProperty("option_windows_copy_exe_to_dest",false), new JProperty("option_windows_sleep_margin",10), new JProperty("option_windows_texture_page","2048x2048"), new JProperty("option_windows_installer_finished","${base_options_dir}/windows/installer/finished.bmp"), new JProperty("option_windows_installer_header","${base_options_dir}/windows/installer/header.bmp"), new JProperty("option_windows_license","${base_options_dir}/windows/installer/license.txt"), new JProperty("option_windows_nsis_file","${base_options_dir}/windows/installer/nsis_script.nsi"), new JProperty("option_windows_enable_steam",(Data.GeneralInfo?.SteamAppID??0)>0), new JProperty("option_windows_disable_sandbox",false), new JProperty("option_windows_steam_use_alternative_launcher",false), new JProperty("resourceVersion","1.1"), new JProperty("name","Windows"), new JProperty("tags",new JArray()), new JProperty("resourceType","GMWindowsOptions")); WriteJsonFile(wop,wo); UMT.Log("Default options files created."); }
    private void CreateDefaultConfig() { /* As before */ string cd=Path.Combine(OutputPath,"configs"); string p=Path.Combine(cd,"Default.config"); try{File.WriteAllText(p,"[Default]\n"); UMT.Log($"Created default config file: {p}");} catch(Exception ex){UMT.Log($"ERROR creating default config file: {ex.Message}");}}

} // End class

public static class ScriptEntry { public static IUMTScript Script = new GMS2Converter(); }
